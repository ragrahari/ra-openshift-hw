// Jenkinsfile for ParksMap
podTemplate(
 label: "maven-appdev",
 cloud: "openshift",
 inheritFrom: "maven",
 containers: [
   containerTemplate(
     name: "jnlp",
     image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev:v3.9",
     resourceRequestMemory: "1Gi",
     resourceLimitMemory: "2Gi"
   )
 ]
) {
 node('maven-appdev') {
   echo "GUID: ${GUID}"
   echo "CLUSTER: ${CLUSTER}"

   // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
   // You need to build the application in directory `ParksMap`.
   // Also copy "../nexus_settings.xml" to your build directory
   // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def subdir = "ParksMap"
    def pomLocation = "${subdir}/pom.xml"
    def mvnCmd = "mvn -s ./nexus_openshift_settings.xml clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga -f ${pomLocation}"
    
    stage('Checkout Source') {
        git credentialsId: 'a4a519c2-831f-4b37-b3dc-1b60f8626eae',
        url: 'https://github.com/ragrahari/ra-openshift-hw.git'
    }
    
    echo 'completed checkout'
    
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("${pomLocation}")
    def artifactId = getArtifactIdFromPom("${pomLocation}")
    def version    = getVersionFromPom("${pomLocation}")
    
    echo 'extracted version from pom files'
    
    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"
    
    echo 'completed setting tag for development images'
    
    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build war') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean package -Dmaven.test.skip=true"
    }
    
    // Using Maven run the unit tests
    stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
    }
    
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"

  }

  // Publish the built war file to Nexus
  stage('Publish to Nexus') {
      echo "Publish to Nexus"
      sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com/repository/releases"
  }

  // Build the OpenShift Image in OpenShift and tag it.
  stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image tasks:${devTag}"
      sh "oc start-build ${artifactId} --from-file=http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com/repository/releases/com/openshift/evg/roadshow/${artifactId}/${version}/${artifactId}-${version}.jar --follow -n ${GUID}-parks-dev"
      openshiftTag alias: 'false', destStream: "${artifactId}", destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: "${artifactId}", srcTag: 'latest', verbose: 'false'
  }

 }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
 def matcher = readFile(pom) =~ '<version>(.+)</version>'
 matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
 def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
 matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
 def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
 matcher ? matcher[0][1] : null
}
